Melbourne Haskell Workshop 2013
===============================

<!-- Trickery to conditionally display the alternate format link -->

### [(HTML)](http://sordina.github.io/haskell_workshop/) {.center #html-link}

<script type="text/javascript">
	document.getElementById('html-link').remove()
	document.write("<h3 class='center'><a href='workshop.pdf'>(PDF)</a></h3>")
</script>

<hr>

A 6-hour workshop intended to introduce and provide resources for working with Haskell.

<!-- http://upload.wikimedia.org/wikipedia/commons/0/0c/Potter's_workshop_VA.jpg -->
<div class="center"> ![Workshop](resources/images/workshop.png) </div>

This workshop is based around a central concept of domain modeling with Haskell.
It uses a narrative of a physicist attempting to understand how the world works.

The workshop will cover the following topics:

-----------------------------   ----------------------------------
[Introduction](#introduction)   Motivation, Overview, and Approach
[ADTs](#adts)                   Modelling with data in Haskell
[Functions](#functions)         Destructuring and evaluating data
[Typeclasses](#typeclasses)     Code-Reuse and Laws
[Ecosystem](#ecosystem)         Resources and Community
[Monads](#monads)               General Purpose DSLs
-----------------------------   ----------------------------------

# TODO: double check these items {.todo}

### Note:

If you are attending the workshop, please attempt to have the required items
from the ['Resources'](#resources) section available for your use.


# TODO: Decide on some followup plans {.todo}

<hr>

Required Resources
==================

Before you begin you will require the following...

## A Text-Editor

We are assuming previous programming experience, however, if you would like a
recommendation, have a look at
[Notepad++](http://notepad-plus-plus.org/),
[Sublime Text](http://www.sublimetext.com/), or the ever-popular
[Emacs](http://www.gnu.org/software/emacs/) and
[Vim](http://www.vim.org/). Just make sure that you are fluent enough to embark
on exercises as they appear in the workshop.

## [The Haskell Platform](http://www.haskell.org/platform/)

In order to run the programs written during this workshop you will need a Haskell
installation. The easiest way to get up and running is to install the latest
Haskell Platform. This is a "batteries included" installation of GHC and Cabal
that includes many of the most useful packages available in the Hackage ecosystem.



Useful Resources
================

These resources are available to help you with any issues you face when learning Haskell:


## \#haskell on [Freenode](http://freenode.net/)

An IRC channel dedicated to discussion of Haskell. This is often the easiest place to fire off
a one-off question that is simple enough not to warrant a permanent listing on the internet.


## [Hackage](http://hackage.haskell.org/packages/hackage.html)

Hackage is the primary repository for Haskell packages. It is public,
searchable, versioned, and uses Cabal package metadata for classification.
Furthermore, this can be used to easily browse package contents, documentation
and source-code.

For example, browse the [Shake](http://hackage.haskell.org/package/shake) package and look
at some of the [Modules](http://hackage.haskell.org/packages/archive/shake/0.10.6/doc/html/Development-Shake-Command.html).


## [Hoogle](http://www.haskell.org/hoogle/)

Hoogle is a Haskell module and function search-engine. Hoogle allows you to
take advantage of the granular type-system used by Haskell to search not just
for function-names, but for function type-signatures.

For example, have a look for the function with signature [Text -> ByteString](http://www.haskell.org/hoogle/?hoogle=Text+-%3E+ByteString).


## [MFUG](http://www.meetup.com/Melbourne-Functional-User-Group-MFUG/)

MFUG is the Melbourne Functional Programmer's User Group. This group discusses
many topics, including Haskell.

## [/r/haskell](www.reddit.com/r/haskell)

For Reddit users, /r/haskell is a very useful resource with a great deal of
information regarding recent developments in the Haskell ecosystem and community.
This is a good place to ask some more advanced questions or start a flame-war.

## [Haskell News](http://haskellnews.org/)

Haskell News is a firehose-style haskell news aggregator taking information from
sources as varied as academic-journals, and GitHub accounts.


## [HLint](http://hackage.haskell.org/package/hlint)

HLint is a [linting tool](http://en.wikipedia.org/wiki/Lint_(software))
for Haskell source - It can often provide some
useful hints about refactoring avenues for your code.

<hr>

Introduction
============

Welcome to the Melbourne Haskell Workshop 2013.

This intent of this workshop is to provide a working introduction to Haskell
for programmers in Melbourne who have not yet used the language in anger.

The following exercises will be presented as part of the workshop:

# TODO: Update once decided {.todo}

* Classification
* Lists
* Org-Chart
* Musical Program
* Image Program
* Web App
* Web Scraper
* Schema Language

<hr>

Setup
=====

### ... and Sanity Checking


Ensure that you have the following programs installed and functioning correctly:

* GHC(i)

At a command prompt, enter the following command:


```shell
ghci
```

This should launch the GHC Haskell REPL.

Type the following to ensure that you have a functioning REPL:

~~~{data-language="haskell"}
1 + 1
~~~

This should yield the result:

```text
2
```

Create the following source file (program.hs):

~~~{data-language="haskell"}
main = print "hello world"
~~~

Compile the program as follows:

```shell
ghc --make program.hs
```

Run the program with the following command:

```shell
./program
```

The output should look as follows:

```text
"hello world"
```

<hr>

Exercise - Org Chart
====================

You are an employee of International Banking Machines.

The CEO has asked you to model the org-chart with a computer program in order
to perform some analysis on the effectiveness of middle-managers.

Before you are able to perform your calculations, you will have to decide how you
will model your data. Construct a Haskell data-type to represent the various types
of employees and departments shown in the following diagram:

<div class="center">![Org Chart](resources/images/dot/01.png)</div>


~~~{.hidden data-language="dot" data-output="resources/images/dot/01.png" data-filter="./resources/scripts/graph.sh"}
digraph IBM {
	graph [ dpi = 100 ];

	b1 [label="IBM - Board of Directors"];

	b1 -> CTO [label=tech];
	b1 -> CFO [label=money];
	b1 -> CEO [label=power];
	CEO -> BurgerFlipping;
	BurgerFlipping -> Fries;
	Fries -> CurlyDepartment;
	Fries -> Regulations;
	BurgerFlipping -> FrontDesk;
	CFO -> HR;
	CFO -> SpyStuff;
	Engineering -> Products;
	Operations -> Africa;
	Operations -> Brazil;
	HR -> Piniatas;
	SpyStuff -> Piniatas;

	Africa -> x1 [arrowhead=odot];
	x1 [shape=rectangle label="Employees: 13\n Manager: Damien"];

	Brazil -> x2 [arrowhead=odot];
	x2 [shape=rectangle label="Employees: 19\n Manager: Dave"];

	Products -> x3 [arrowhead=odot];
	x3 [shape=rectangle label="Employees: 11\n Manager: Dennis"];

	CurlyDepartment -> x4 [arrowhead=odot];
	x4 [shape=rectangle label="Employees: 14\n Manager: Darren"];

	Regulations -> x5 [arrowhead=odot];
	x5 [shape=rectangle label="Employees: 18\n Manager: Dylan"];

	FrontDesk -> x6 [arrowhead=odot];
	x6 [shape=rectangle label="Employees: 23\n Manager: Devin"];

	Piniatas -> x7 [arrowhead=odot];
	x7 [shape=rectangle label="Employees: 22\n Manager: Dorris"];
}
~~~


<hr>

Exercise - Music
================

Once you have a model that reaches a sufficient level of complexity you will find
that your data-types become recursive.

<!-- http://i824.photobucket.com/albums/zz163/Boysie8/Telecaster%20build/f-hole.jpg -->
<div class="center"><img src="resources/images/f-hole.jpg" /></div>

Here is a small musical target-language:

~~~{data-language="haskell"}
data Music
  = A_ -- Underscore Represents a Flat
  | A
  | A' -- Prime represents a Sharp
       -- ... B, C, D, E, F, G ...
  | Sequence [Music]
  | Sharp Music
  | Longer Integer Music
  | Higher Integer Music
~~~

Certainly not comprehensive enough to write Beethoven's 5th Symphony,
but good enough for Baa Baa Black-Sheep.

~~~{data-language="haskell"}
intro   = Sequence [ C, C, G, G ]
run     = Sequence [ A, B, C, A ]
middle  = Sequence [ F, F, E, E ]
run2    = Sequence [ D, C, D, E ]
baa_baa = Sequence [ Longer 2  intro
                   , Higher 12 run
                   , Longer 4  G
                   , Longer 2  middle
                   , run2
                   , Longer 4  C ]
~~~


In order to listen to this music, create a file with the following code:

~~~{data-language="haskell"}
import Midi
import qualified Data.ByteString as BS

main = BS.writeFile "baa_baa.mid" (make_music 4 4 (Longer 4 baa_baa))
~~~

Your task is to write a melody using this language. Try to write and compose
functions, rather than declaring one big data-structure.

<hr>

Appendix
========

[Hutton's Razor](http://stackoverflow.com/questions/17870864/where-is-huttons-razor-first-defined)
